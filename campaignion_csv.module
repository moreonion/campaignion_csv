<?php

/**
 * @file
 * Hook implementations and callbacks for the campaignion_csv mdule.
 */

use Drupal\campaignion_csv\DirectoryManager;
use Drupal\campaignion_csv\Exporter\ActivityExporter;
use Drupal\campaignion_csv\Exporter\ContactExporter;
use Drupal\campaignion_csv\Exporter\OptInExporter;
use Drupal\campaignion_csv\Exporter\TargetStatsExporter;
use Drupal\campaignion_csv\Exporter\TargetMessageExporter;
use Drupal\campaignion_csv\Exporter\WebformFormatted\SubmissionPropertySelector;
use Drupal\campaignion_csv\Exporter\WebformGeneric\Exporter as WebformExporter;
use Drupal\campaignion_csv\Files\ContactRangeFilePattern;
use Drupal\campaignion_csv\Files\MonthlyFilePattern;
use Drupal\campaignion_csv\Files\NodeQueryFilePattern;
use Drupal\campaignion_csv\Files\YearlyFilePattern;

/**
 * Implements hook_cronapi().
 */
function campaignion_csv_cronapi() {
  $items['campaignion_csv_cron'] = array(
    'description' => 'Update exported files.',
    'rule' => '0+@ 0 * * *',
    'weight' => 100,
    'callback' => 'campaignion_csv_cron',
    'enabled' => FALSE,
  );
  return $items;
}

/**
 * Cron callback: Update exported files.
 */
function campaignion_csv_cron() {
  DirectoryManager::fromConfig()->build();
}

/**
 * Implements hook_campaignion_csv_info().
 */
function campaignion_csv_campaignion_csv_info() {
  $export['actions_monthly'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'actions/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => WebformExporter::class,
      'actions' => TRUE,
      'donations' => FALSE,
    ],
  ];
  $export['donations_monthly'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'donations/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => WebformExporter::class,
      'actions' => FALSE,
      'donations' => TRUE,
    ],
  ];
  $export['contacts'] = [
    'file_pattern' => [
      'class' => ContactRangeFilePattern::class,
      'bundle' => 'contact',
      'contacts_per_file' => 100000,
      'path' => 'contacts/%03d.csv',
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => ContactExporter::class,
      'bundle' => 'contact',
    ],
  ];
  $export['activities_monthly'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'activities/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => ActivityExporter::class,
    ],
  ];
  $export['opt_ins'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'opt-ins/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => OptInExporter::class,
      'opt_in' => TRUE,
    ],
  ];
  $export['opt_outs'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'opt-outs/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => OptInExporter::class,
      'opt_in' => FALSE,
    ],
  ];
  $export['target_message_count'] = [
    'file_pattern' => [
      'class' => NodeQueryFilePattern::class,
      'date_pattern_class' => YearlyFilePattern::class,
      'path' => 'targets/node!nid-%Y.csv',
      'retention_period' => new \DateInterval('P24M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => TargetStatsExporter::class,
    ],
  ];
  $export['target_messages'] = [
    'file_pattern' => [
      'class' => MonthlyFilePattern::class,
      'path' => 'target-messages/%Y-%m.csv',
      'retention_period' => new \DateInterval('P6M'),
      'refresh_interval' => new \DateInterval('PT23H30M'),
    ],
    'exporter' => [
      'class' => TargetMessageExporter::class,
      'columns' => [
        'nid' => [
          'selector' => SubmissionPropertySelector::class,
          'property' => 'nid',
        ],
        'node.type' => [
          'selector' => SubmissionPropertySelector::class,
          'property' => 'node.type',
        ],
        'sid' => [
          'selector' => SubmissionPropertySelector::class,
          'property' => 'sid',
        ],
        'Email address' => ['keys' => ['email']],
        'First name' => ['keys' => ['first_name']],
        'Last name' => ['keys' => ['last_name']],
        'Postcode' => ['keys' => ['postcode']],
      ],
    ],
  ];
  return $export;
}

/**
 * Implements hook_webform_results_download_submission_information_info_alter().
 *
 * Add a NID column right before the SID column.
 */
function campaignion_csv_webform_results_download_submission_information_info_alter(array &$info, $node = NULL, $options = NULL) {
  if (!$options || !empty($options['multiple_nodes'])) {
    $index = array_search('webform_sid', array_keys($info));
    $columns['webform_nid'] = t('NID');
    $info = array_slice($info, 0, $index) + $columns + array_slice($info, $index);
  }
}

/**
 * Implements hook_webform_results_download_submission_information_data_row().
 *
 * This hook is invoked if
 * @link https://www.drupal.org/project/webform/issues/3086038 #3086038 @endlink
 * is applied.
 */
function campaignion_csv_webform_results_download_submission_information_data_row($submission, array $options, $serial_start, $row_count) {
  $data['webform_nid'] = $submission->nid;
  return $data;
}

/**
 * Implements hook_webform_results_download_submission_information_data().
 *
 * This is the implementation for unpatched webform versions. It can be replaced
 * with a version dependency once there is a webform release featuring the new
 * hook.
 */
function campaignion_csv_webform_results_download_submission_information_data($token, $submission, array $options, $serial_start, $row_count) {
  switch ($token) {
    case 'webform_nid':
      return $submission->nid;
  }
}
